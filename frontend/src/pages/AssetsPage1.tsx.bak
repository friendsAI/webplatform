import React, { useState, useEffect } from 'react';
import {
  Typography,
  message,
  Input,
  Button,
  Table,
  Space,
  Modal,
  Form,
  Radio,
  Upload,
  Checkbox,
  message
} from 'antd';
import { SearchOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';

const { Title } = Typography;
const { Dragger } = Upload;
// API 根路径，根据当前页面 host 自动映射到后端 
const apiBase = `http://${window.location.hostname}:8888/api`;
interface Asset {
  key: string;
  name: string;
  source: string;
  filename?: string;
  uploaded_at?: string;
}

const AssetsPage: React.FC = () => {
  const [dataSource, setDataSource] = useState<Asset[]>([]);
  const [visible, setVisible] = useState(false);
  const [form] = Form.useForm();

  const openModal = () => setVisible(true);
  const closeModal = () => {
    form.resetFields();
    setVisible(false);
  };

  // 加载资产列表（区分空数据和网络/HTTP 错误）
  const fetchAssets = async () => {
    try {
      const res = await fetch(`${apiBase}/assets/list`);
      if (!res.ok) {
        message.error(`加载资产列表失败：${res.status} ${res.statusText}`);
        return;
      }
      const list = await res.json();
      // 空数组也算正常
      setDataSource(
         list.map((item: any) => ({
           key: String(item.id),
           name: item.name,
           source: item.source,
           filename: item.filename,
           uploaded_at: item.uploaded_at,
         }))
       );
     } catch (err) {
       console.error('fetchAssets error', err);
       message.error('加载资产列表请求失败，请检查网络');
     }

  };

  useEffect(() => {
    fetchAssets();
  }, []);

  // 提交表单：先上传文件，再写入 data_assets
  const handleOk = async () => {
    try {
      const values = await form.validateFields();
      const { name, source, file, gen_key, encrypt_file, submit_enc_file } = values;

      // 1) 上传文件
      const formData = new FormData();
      formData.append('file', file[0].originFileObj);
      const uploadRes = await fetch('/api/upload', { method: 'POST', body: formData });
      const { file_id } = await uploadRes.json();

      // 2) 写入资产表
      const assetRes = await fetch('/api/assets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, source, file_id, gen_key, encrypt_file, submit_enc_file }),
      });

      if (assetRes.ok) {
        message.success('新增资产成功');
        closeModal();
        fetchAssets();
      } else {
        const err = await assetRes.json();
        message.error(err.error || '新增资产失败');
      }
    } catch {
      // 表单验证失败或其他异常，留给 Form 自己提示
    }
  };

  const columns = [
    { title: '资产名称', dataIndex: 'name', key: 'name' },
    { title: '数据来源', dataIndex: 'source', key: 'source' },
    { title: '文件名', dataIndex: 'filename', key: 'filename' },
    { title: '上传时间', dataIndex: 'uploaded_at', key: 'uploaded_at' },
    {
      title: '操作',
      key: 'action',
      render: (_: any, record: Asset) => (
        <Space size="middle">
          <a>查看</a>
          <a>编辑</a>
          <a>删除</a>
        </Space>
      ),
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      <Title level={2}>数据资产管理</Title>
      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between' }}>
        <Input placeholder="搜索数据资产" prefix={<SearchOutlined />} style={{ width: 300 }} />
        <Button type="primary" icon={<PlusOutlined />} onClick={openModal}>
          新增数据
        </Button>
      </div>
      <Table dataSource={dataSource} columns={columns} rowKey="key" />

      <Modal
        title="新增数据资产"
        open={visible}
        onOk={handleOk}
        onCancel={closeModal}
        okText="确定"
        cancelText="取消"
        maskClosable={false}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="name"
            label="数据集名称"
            rules={[{ required: true, message: '请输入数据集名称' }]}
          >
            <Input placeholder="请输入名称" />
          </Form.Item>

          <Form.Item name="source" label="数据集来源" initialValue="upload">
            <Radio.Group>
              <Radio value="upload">文件上传</Radio>
            </Radio.Group>
          </Form.Item>

          <Form.Item
            name="file"
            label="点击此上传文件"
            valuePropName="fileList"
            getValueFromEvent={(e: any) => e && e.fileList}
            rules={[{ required: true, message: '请上传文件' }]}
          >
            <Dragger name="file" beforeUpload={() => false} multiple={false} style={{ padding: '24px 0' }}>
              <UploadOutlined style={{ fontSize: 32 }} />
              <div>点击此上传文件</div>
            </Dragger>
          </Form.Item>

          <Form.Item name="gen_key" valuePropName="checked">
            <Checkbox>产生密钥</Checkbox>
          </Form.Item>
          <Form.Item name="encrypt_file" valuePropName="checked">
            <Checkbox>加密文件</Checkbox>
          </Form.Item>
          <Form.Item name="submit_enc_file" valuePropName="checked">
            <Checkbox>提交应密文件</Checkbox>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AssetsPage;

